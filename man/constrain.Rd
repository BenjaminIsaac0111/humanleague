% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{constrain}
\alias{constrain}
\title{Constrained a pregenerated population in 2 dimensions given a constraint matrix.}
\usage{
constrain(population, permittedStates)
}
\arguments{
\item{population}{an integer matrix containing the population.}

\item{permittedStates}{a matrix of booleans containing allowed states. The matrix dimensions must be the length of each marginal}
}
\value{
an object containing: the adjusted population matrix and a convergence flag.
}
\description{
Using an iterative algorithm, this function
adjusts a 2-dimensional population table, reassigning populations in disallowed states to allowed ones, preserving the two marginal distributions
states where elements sum to the input marginals.
Users need to ensure that the supplied constraint matrix permits a valid population to be computed - this is not always obvious from the input data.
}
\examples{
r = c(0, 3, 17, 124, 167, 79, 46, 22)
# rooms (1,2,3...9+)
b = c(0, 15, 165, 238, 33, 7) # bedrooms {0, 1,2...5+}
permitted = matrix(rep(TRUE,length(r)*length(b)), nrow=length(r)) # all states permitted
# now disallow bedrooms>rooms
  for (i in 1:length(r)) {
    for (j in 1:length(b)) {
      if (j > i + 1)
        p[i,j] = FALSE;
    }
  }
res = humanleague::synthPop(list(r,b)) # unconstrained synthesis
res = humanleague::constrain(res$x.hat, permitted)
}
